name: Build Executable

on:
  push:
    branches: [ main, master ]
    tags:
      - 'v*'
  pull_request:
    branches: [ main, master ]
  release:
    types: [ created ]
  workflow_dispatch:

jobs:
  build:
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [windows-latest, ubuntu-latest, macos-latest]
    name: Build on ${{ matrix.os }}
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
      
      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: '22.x'
          cache: 'npm'
      
      - name: Install dependencies
        run: npm ci
      
      - name: Get version from package.json
        id: package_version
        shell: bash
        run: |
          VERSION=$(node -e "const pkg = JSON.parse(require('fs').readFileSync('./package.json', 'utf8')); console.log(pkg.version)")
          echo "version=$VERSION" >> $GITHUB_OUTPUT
          echo "Version: $VERSION"
      
      - name: Build executable
        run: npm run build
      
      - name: Verify executable
        shell: bash
        run: |
          if [[ "${{ runner.os }}" == "Windows" ]]; then
            if [ ! -f "chatipelago.exe" ]; then
              echo "Error: chatipelago.exe not found"
              exit 1
            fi
            ls -lh chatipelago.exe
          else
            if [ ! -f "chatipelago" ]; then
              echo "Error: chatipelago not found"
              exit 1
            fi
            chmod +x chatipelago
            ls -lh chatipelago
          fi
      
      - name: Create tar.gz archive (Windows)
        if: runner.os == 'Windows'
        shell: pwsh
        run: |
          $archiveName = "chatipelago-windows-${{ steps.package_version.outputs.version }}.tar.gz"
          $filesToArchive = @('chatipelago.exe', 'README.md', 'LICENSE') | Where-Object { Test-Path $_ }
          if ($filesToArchive.Count -eq 0) {
            Write-Error "No files found to archive"
            exit 1
          }
          tar -czf $archiveName $filesToArchive
          Write-Host "Created: $archiveName ($(Get-Item $archiveName | Select-Object -ExpandProperty Length) bytes)"
      
      - name: Determine OS name and archive format
        if: runner.os != 'Windows'
        shell: bash
        run: |
          if [[ "${{ matrix.os }}" == "ubuntu-latest" ]]; then
            OS_NAME="ubuntu"
            ARCHIVE_EXT="zip"
          elif [[ "${{ matrix.os }}" == "macos-latest" ]]; then
            OS_NAME="macos"
            ARCHIVE_EXT="tar.gz"
          else
            OS_NAME="${{ matrix.os }}"
            ARCHIVE_EXT="zip"
          fi
          echo "OS_NAME=${OS_NAME}" >> $GITHUB_ENV
          echo "ARCHIVE_EXT=${ARCHIVE_EXT}" >> $GITHUB_ENV
      
      - name: Create zip archive (Ubuntu)
        if: runner.os != 'Windows' && env.ARCHIVE_EXT == 'zip'
        shell: bash
        run: |
          ARCHIVE_NAME="chatipelago-${{ env.OS_NAME }}-${{ steps.package_version.outputs.version }}.zip"
          zip -r "$ARCHIVE_NAME" chatipelago README.md LICENSE 2>/dev/null || {
            echo "Error: Failed to create zip archive"
            exit 1
          }
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "Created: $ARCHIVE_NAME ($(stat -c%s "$ARCHIVE_NAME" 2>/dev/null || echo 'unknown') bytes)"
      
      - name: Create tar.gz archive (macOS)
        if: runner.os != 'Windows' && env.ARCHIVE_EXT == 'tar.gz'
        shell: bash
        run: |
          ARCHIVE_NAME="chatipelago-${{ env.OS_NAME }}-${{ steps.package_version.outputs.version }}.tar.gz"
          tar -czf "$ARCHIVE_NAME" chatipelago README.md LICENSE || {
            echo "Error: Failed to create tar.gz archive"
            exit 1
          }
          echo "ARCHIVE_NAME=${ARCHIVE_NAME}" >> $GITHUB_ENV
          echo "Created: $ARCHIVE_NAME ($(stat -f%z "$ARCHIVE_NAME" 2>/dev/null || stat -c%s "$ARCHIVE_NAME" 2>/dev/null || echo 'unknown') bytes)"
      
      - name: Upload tar.gz archive (Windows)
        if: runner.os == 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: chatipelago-windows-${{ steps.package_version.outputs.version }}
          path: chatipelago-windows-${{ steps.package_version.outputs.version }}.tar.gz
          retention-days: 30
      
      - name: Upload archive (Unix)
        if: runner.os != 'Windows'
        uses: actions/upload-artifact@v4
        with:
          name: chatipelago-${{ env.OS_NAME }}-${{ steps.package_version.outputs.version }}
          path: chatipelago-${{ env.OS_NAME }}-${{ steps.package_version.outputs.version }}.${{ env.ARCHIVE_EXT }}
          retention-days: 30

  release:
    needs: build
    runs-on: ubuntu-latest
    if: github.event_name == 'release' || (github.event_name == 'push' && startsWith(github.ref, 'refs/tags/'))
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0
      
      - name: Get version from tag
        if: github.event_name != 'release'
        id: tag_version
        shell: bash
        run: |
          TAG=${GITHUB_REF#refs/tags/}
          echo "tag=$TAG" >> $GITHUB_OUTPUT
          echo "Release tag: $TAG"
      
      - name: Download all artifacts
        uses: actions/download-artifact@v4
        with:
          path: artifacts
      
      - name: Upload to release
        uses: softprops/action-gh-release@v1
        with:
          tag_name: ${{ github.event_name == 'release' && github.event.release.tag_name || steps.tag_version.outputs.tag }}
          name: Release ${{ github.event_name == 'release' && github.event.release.tag_name || steps.tag_version.outputs.tag }}
          files: artifacts/**/*
          draft: false
          prerelease: false
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
